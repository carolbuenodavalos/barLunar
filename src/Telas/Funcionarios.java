/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas;

import dao.FuncionarioDao;
import dao.MesaDao;
import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.table.DefaultTableModel;
import models.modeloEstoque;
import models.modeloFuncionario;
import models.modeloMesa;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author marcu
 */
public class Funcionarios extends javax.swing.JFrame {
    int contador=0;
    /**
     * Creates new form Funcionarios
     */
    public Funcionarios() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(39, 52, 105));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        CampoNome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        butaoSalvar = new javax.swing.JButton();
        PainelPizzaFuncionario = new javax.swing.JPanel();
        TabelaFuncionarios = new javax.swing.JScrollPane();
        TabelaNomeFuncionario = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        CampoID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Candara Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("FUNCIONÁRIOS");

        CampoNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoNomeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Nome do Funcionário");

        butaoSalvar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        butaoSalvar.setText("Salvar");
        butaoSalvar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                butaoSalvarMouseClicked(evt);
            }
        });
        butaoSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butaoSalvarActionPerformed(evt);
            }
        });

        PainelPizzaFuncionario.setBackground(new java.awt.Color(255, 255, 255));
        PainelPizzaFuncionario.setLayout(new java.awt.BorderLayout());

        TabelaNomeFuncionario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Funcionários"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TabelaNomeFuncionario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabelaNomeFuncionarioMouseClicked(evt);
            }
        });
        TabelaFuncionarios.setViewportView(TabelaNomeFuncionario);
        if (TabelaNomeFuncionario.getColumnModel().getColumnCount() > 0) {
            TabelaNomeFuncionario.getColumnModel().getColumn(0).setResizable(false);
            TabelaNomeFuncionario.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ID");

        CampoID.setEditable(false);
        CampoID.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(CampoID, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CampoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(butaoSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TabelaFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(PainelPizzaFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PainelPizzaFuncionario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CampoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CampoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addComponent(butaoSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(TabelaFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CampoNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoNomeActionPerformed

    private void butaoSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butaoSalvarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_butaoSalvarActionPerformed

    private void butaoSalvarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_butaoSalvarMouseClicked
        if (CampoNome.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhum dado identificado");
            CampoNome.requestFocus();
        } else {
            if (contador == 0) {
                try {
                    modeloFuncionario cadastroP = new modeloFuncionario();
                    cadastroP.setNomeFunc(CampoNome.getText());

                    FuncionarioDao cadastroPDao = new FuncionarioDao();
                    cadastroPDao.inserir(cadastroP);
                    atualizarFuncionario(cadastroPDao);
                    limparCampos();
                    JOptionPane.showMessageDialog(null, "Cadastro de Funcionário feito com sucesso!", "", INFORMATION_MESSAGE);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
                }
            } else {
                // Atualizar o registro
                modeloFuncionario cadastroP = new modeloFuncionario();
                cadastroP.setIdFunc(Integer.parseInt(CampoID.getText()));
                cadastroP.setNomeFunc(CampoNome.getText());

                FuncionarioDao cadastroPDao = new FuncionarioDao();
                cadastroPDao.alterar(cadastroP);
                atualizarFuncionario(cadastroPDao);
                limparCampos();
                JOptionPane.showMessageDialog(null, "Cadastro de Funcionário alterado com sucesso!", "", INFORMATION_MESSAGE);

                finalizarEdicao(); // Finaliza o modo de edição
            }
        }
    }//GEN-LAST:event_butaoSalvarMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
         MesaDao mesaDao = new MesaDao();
         atualizaDashFuncionario(mesaDao);
         
         FuncionarioDao DaoFunc = new FuncionarioDao();
         atualizarFuncionario(DaoFunc);
    }//GEN-LAST:event_formWindowOpened

    private void TabelaNomeFuncionarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelaNomeFuncionarioMouseClicked
    if ((TabelaNomeFuncionario.getSelectedRow() != -1) && (evt.getClickCount() == 2)) {
          // Preenche os campos com os valores da linha selecionada
          CampoID.setText(TabelaNomeFuncionario.getValueAt(TabelaNomeFuncionario.getSelectedRow(), 0).toString());
          CampoNome.setText(TabelaNomeFuncionario.getValueAt(TabelaNomeFuncionario.getSelectedRow(), 1).toString());

          // Entra no modo de edição
          contador = 1;
          butaoSalvar.setText("Alterar");
      }  
    }//GEN-LAST:event_TabelaNomeFuncionarioMouseClicked
    
    void atualizarFuncionario(FuncionarioDao DaoFunc){
        try{
               limparTabela();

                    ArrayList<modeloFuncionario> listaCadastros;
                    listaCadastros = DaoFunc.consultar();        
                    DefaultTableModel modeloTabela = (DefaultTableModel) TabelaNomeFuncionario.getModel();

                    for(modeloFuncionario cadastroP : listaCadastros){
                        modeloTabela.addRow(new String[]{ Integer.toString(cadastroP.getIdFunc()), cadastroP.getNomeFunc() });
                    }
                    
                    }catch(Exception ex){
                    JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
                    }
                
    }
    
    private void finalizarEdicao() {
    contador = 0; // Sai do modo de edição
    TabelaNomeFuncionario.setEnabled(true); // Reativa a tabela
    butaoSalvar.setText("Salvar"); // Altera o texto do botão para "Salvar"
    limparCampos(); // Limpa os campos
}

    
    private void limparTabela(){
        //percorre a tabela e exclui todas as linhas
        while(TabelaNomeFuncionario.getRowCount() > 0){
            DefaultTableModel dm = (DefaultTableModel) TabelaNomeFuncionario.getModel();
            dm.getDataVector().removeAllElements();
        }
    }
    
    void atualizaDashFuncionario(MesaDao cadastroDao) {
    new Thread() {
        @Override public void run() {
            while (true) {
                try {
                    ArrayList<modeloMesa> listaCadastros;
                    listaCadastros = cadastroDao.dashboard();
                    
                    DefaultCategoryDataset barChartData = new DefaultCategoryDataset();
                    DefaultPieDataset pizzaChartData = new DefaultPieDataset();
                    
                    for (modeloMesa cadastro : listaCadastros) {
                        pizzaChartData.setValue(cadastro.getFuncionario(), cadastro.getNumFunc());
                    }

                    // Cria e atualiza o gráfico de pizza
                    JFreeChart pizzaChart = ChartFactory.createPieChart("Funcionarios mais ativos", pizzaChartData);
                    PiePlot pizzachrt = (PiePlot) pizzaChart.getPlot();
                    ChartPanel ChartPizza = new ChartPanel(pizzaChart);

                    // Atualiza o painel gráfico
                    PainelPizzaFuncionario.removeAll();
                    PainelPizzaFuncionario.setLayout(new BorderLayout()); // Configura o layout
                    PainelPizzaFuncionario.add(ChartPizza, BorderLayout.CENTER);
                    PainelPizzaFuncionario.validate();
                    PainelPizzaFuncionario.repaint(); // Garante que o painel seja atualizado

                    Thread.sleep(5000); // Intervalo de 10 segundos (ajuste conforme necessário)

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
                }
            }
        }
    }.start();
}
    private void limparCampos(){
        this.CampoNome.setText(""); 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Funcionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Funcionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Funcionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Funcionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Funcionarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CampoID;
    private javax.swing.JTextField CampoNome;
    private javax.swing.JPanel PainelPizzaFuncionario;
    private javax.swing.JScrollPane TabelaFuncionarios;
    private javax.swing.JTable TabelaNomeFuncionario;
    private javax.swing.JButton butaoSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
